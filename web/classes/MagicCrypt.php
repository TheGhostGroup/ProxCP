<?php

namespace org\magiclen\magiccrypt;

class MagicCrypt
{
    private $iv = NULL;
    private $key = NULL;
    private $bit = NULL;
    public function __construct($key = "", $bit = 128, $iv = "")
    {
        switch ($bit) {
            case 64:
                $this->key = MagicCrypt::crc64($key);
                if ($iv != "") {
                    $this->iv = MagicCrypt::crc64($iv);
                } else {
                    $this->iv = _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0);
                }
                break;
            case 128:
            case 192:
            case 128:
                $this->key = _obfuscated_0D2430262A3D3F2C1C3C0F173E192A0C381E2D343D0C11_("MD5", $key, true);
                break;
            default:
                throw new \Exception("The key must be 8 bytes(64 bits), 16 bytes(128 bits), 24 bytes(192 bits) or 32 bytes(256 bits)!");
            case 192:
                $this->key = _obfuscated_0D2430262A3D3F2C1C3C0F173E192A0C381E2D343D0C11_("tiger192,3", $key, true);
                break;
            case 256:
                $this->key = _obfuscated_0D2430262A3D3F2C1C3C0F173E192A0C381E2D343D0C11_("SHA256", $key, true);
                break;
            default:
                if ($iv != "") {
                    $this->iv = _obfuscated_0D2430262A3D3F2C1C3C0F173E192A0C381E2D343D0C11_("MD5", $iv, true);
                } else {
                    $this->iv = _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0) . _obfuscated_193009121D2F281F09281122_(0);
                }
                $this->bit = $bit;
        }
    }
    public function encrypt($str)
    {
        $_obfuscated_0D0F0B2B183E0201143E5B3E12053F1A1E381018360722_ = _obfuscated_232A0E3E312F2B213E13215B392C350F0401_($str, "aes-256-cbc", $this->key, OPENSSL_RAW_DATA, $this->iv);
        return _obfuscated_0D35193F2E181B3827303C313501163C3C26153F293311_($_obfuscated_0D0F0B2B183E0201143E5B3E12053F1A1E381018360722_);
    }
    public function decrypt($str)
    {
        return _obfuscated_0D0C0F311731161023130F403F0415352E401D05402111_(_obfuscated_0D233606351C15120E23260F2B3828130B2D0407113B11_($str), "aes-256-cbc", $this->key, OPENSSL_RAW_DATA, $this->iv);
    }
    private static function crc64Table()
    {
        $_obfuscated_0D5C311F221D3507070E2601242B14100B111C13332801_ = [];
        $_obfuscated_0D132A37145B311C32405B240D0E04381D38032F252922_ = -1444268397;
        $_obfuscated_0D02150E2C12320B3C2D2F180833051D101323181B1A22_ = 0;
        $_obfuscated_0D0C2A32330E1621230C290611401908313C0B0B2A1E22_ = 1;
        for ($i = 1; $i < 64; $i++) {
            $_obfuscated_0D0C2A32330E1621230C290611401908313C0B0B2A1E22_ = ($_obfuscated_0D0C2A32330E1621230C290611401908313C0B0B2A1E22_ << 1) + 1;
        }
        for ($i = 0; $i < 256; $i++) {
            $_obfuscated_0D32162825350F1921053113291F370E191C3C2A372322_ = $i;
            for ($j = 0; $j < 64; $j++) {
                if (($_obfuscated_0D32162825350F1921053113291F370E191C3C2A372322_ & $_obfuscated_0D02150E2C12320B3C2D2F180833051D101323181B1A22_) == 0) {
                    $_obfuscated_0D32162825350F1921053113291F370E191C3C2A372322_ = $_obfuscated_0D32162825350F1921053113291F370E191C3C2A372322_ << 1;
                } else {
                    $_obfuscated_0D32162825350F1921053113291F370E191C3C2A372322_ = $_obfuscated_0D32162825350F1921053113291F370E191C3C2A372322_ << 1;
                    $_obfuscated_0D32162825350F1921053113291F370E191C3C2A372322_ = $_obfuscated_0D32162825350F1921053113291F370E191C3C2A372322_ ^ $_obfuscated_0D132A37145B311C32405B240D0E04381D38032F252922_;
                }
            }
            $_obfuscated_0D5C311F221D3507070E2601242B14100B111C13332801_[$i] = $_obfuscated_0D32162825350F1921053113291F370E191C3C2A372322_ & $_obfuscated_0D0C2A32330E1621230C290611401908313C0B0B2A1E22_;
        }
        return $_obfuscated_0D5C311F221D3507070E2601242B14100B111C13332801_;
    }
    private static function crc64($string)
    {
        if ($_obfuscated_0D5C311F221D3507070E2601242B14100B111C13332801_ === NULL) {
            $_obfuscated_0D5C311F221D3507070E2601242B14100B111C13332801_ = MagicCrypt::crc64Table();
        }
        $_obfuscated_0D14331D3521221E273F3D05162D3C28042C2912260322_ = -1;
        $_obfuscated_0D1E2C1107183F07093D32321D3405092435010F3E1122_ = -1;
        $_obfuscated_0D272E382C140A22282437191B193E3D15252733080811_ = _obfuscated_0D36303F0C403E1C2D1B1E2E3C23351614093B080D3022_($string);
        for ($i = 0; $i < $_obfuscated_0D272E382C140A22282437191B193E3D15252733080811_; $i++) {
            $_obfuscated_0D21161D0D5C02033519242801240C39030D1429310E11_ = ($_obfuscated_0D1E2C1107183F07093D32321D3405092435010F3E1122_ >> 56 & $_obfuscated_0D14331D3521221E273F3D05162D3C28042C2912260322_ ^ _obfuscated_0D1A01271606162B3D022C312C10390204022226400701_($string[$i])) & 255;
            $_obfuscated_0D1E2C1107183F07093D32321D3405092435010F3E1122_ = $_obfuscated_0D1E2C1107183F07093D32321D3405092435010F3E1122_ << 8 ^ $_obfuscated_0D5C311F221D3507070E2601242B14100B111C13332801_[$_obfuscated_0D21161D0D5C02033519242801240C39030D1429310E11_];
        }
        $_obfuscated_0D1E2C1107183F07093D32321D3405092435010F3E1122_ = $_obfuscated_0D1E2C1107183F07093D32321D3405092435010F3E1122_ ^ -1;
        return _obfuscated_0D322B13080E1838071223070515353E2F10343E160F22_("CCCCCCCC", $_obfuscated_0D1E2C1107183F07093D32321D3405092435010F3E1122_ >> 56 & $_obfuscated_0D14331D3521221E273F3D05162D3C28042C2912260322_, $_obfuscated_0D1E2C1107183F07093D32321D3405092435010F3E1122_ << 8 >> 56 & $_obfuscated_0D14331D3521221E273F3D05162D3C28042C2912260322_, $_obfuscated_0D1E2C1107183F07093D32321D3405092435010F3E1122_ << 16 >> 56 & $_obfuscated_0D14331D3521221E273F3D05162D3C28042C2912260322_, $_obfuscated_0D1E2C1107183F07093D32321D3405092435010F3E1122_ << 24 >> 56 & $_obfuscated_0D14331D3521221E273F3D05162D3C28042C2912260322_, $_obfuscated_0D1E2C1107183F07093D32321D3405092435010F3E1122_ << 32 >> 56 & $_obfuscated_0D14331D3521221E273F3D05162D3C28042C2912260322_, $_obfuscated_0D1E2C1107183F07093D32321D3405092435010F3E1122_ << 40 >> 56 & $_obfuscated_0D14331D3521221E273F3D05162D3C28042C2912260322_, $_obfuscated_0D1E2C1107183F07093D32321D3405092435010F3E1122_ << 48 >> 56 & $_obfuscated_0D14331D3521221E273F3D05162D3C28042C2912260322_, $_obfuscated_0D1E2C1107183F07093D32321D3405092435010F3E1122_ << 56 >> 56 & $_obfuscated_0D14331D3521221E273F3D05162D3C28042C2912260322_);
    }
}

?>
